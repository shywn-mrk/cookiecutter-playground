stages:
  - lint
  # - test
  - build

precommit:
  stage: lint
  image: python:3.11
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - pip install -q pre-commit
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

# pytest:
#   stage: test
#   image: docker/compose:2.23.3
#   tags:
#     - docker
#   services:
#     - docker:dind
#   before_script:
#     - docker-compose -f local.yml build
#     # Ensure celerybeat does not crash due to non-existent tables
#     - docker-compose -f local.yml run --rm django python manage.py migrate
#     - docker-compose -f local.yml up -d
#   script:
#     - docker-compose -f local.yml run django pytest

build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  script:
    # Setup the environment files
    - chmod +x add_env_vars_in_ci.sh
    - mkdir -p .envs/.production
    - ./add_env_vars_in_ci.sh

    # Login, build, and push to registry
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    # - docker-compose disable-v2
    - docker-compose -f production.yml build
    - docker-compose -f production.yml push
